@page "/fetchdata"

@using SEP6_TEST.Data
@using SEP6_TEST.Models
@using SEP6_TEST.ApiAccess
@using SEP6_TEST.ApiModels
@inject WeatherForecastService ForecastService
@inject IMovieAccessInfoApi movieApi

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    @*@if (!MovieBaseInfo.image.url.Equals(null))
    {
        <img src=@MovieBaseInfo.image.url alt="MovieImage">
        <p>@MovieBaseInfo.titleType</p>
    }*@
    <p>Rating: @ratings.rating</p>
    <p>Rating count: @ratings.ratingCount</p>
    @foreach (var r in ratings.otherRanks)
    {
        <p>Label: @r.label</p>
        <p>Rank: @r.rank</p>
    }

}

@code {
    private WeatherForecast[] forecasts;
    private string stringFromDb = "";

    private MovieBaseInfo MovieBaseInfo = new MovieBaseInfo();
    private Ratings ratings = new Ratings();

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);

        using (var context = new SqlServerSep6Context())
        {
            //stringFromDb = context.Movies.Where(p => p.Id == 15414).Select(p => p.Title).FirstOrDefault().ToString();
            // we are storing only the movies in the db
            //the other things we will get from imdb api

            await movieApi.GetMovieBaseInfoAsync("tt0944947");
            MovieBaseInfo = movieApi.movieBaseInfo;

            await movieApi.GetMovieRatingsAsync("tt0944947");
            ratings = movieApi.ratings;
        }


    }
}
